<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="zh-CN"
   >
  <title type="text">东篱</title>
  <subtitle type="text">文字打败时间</subtitle>

  <updated>2012-08-27T13:11:44Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://likang.me/blog" />
  <id>http://likang.me/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://likang.me/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://likang.me/blog</uri>
    </author>
    <title type="html"><![CDATA[伦敦奥运]]></title>
    <link rel="alternate" type="text/html" href="http://likang.me/blog/2012/08/13/2012-london" />
    <id>http://likang.me/blog/2012/08/13/2012-london</id>
    <updated>2012-08-13T20:46:27Z</updated>
    <published>2012-08-13T20:46:27Z</published>
    <category scheme="http://likang.me/blog" term="life" />
    <summary type="html"><![CDATA[伦敦奥运]]></summary>
    <content type="html" xml:base="http://likang.me/blog/2012/08/13/2012-london"><![CDATA[<p>伦敦奥运结束，往年看奥运多是看热闹，今年看到了更多的感动。</p>
<p>其实最开心的是看获奖选手的赛后采访。他们或是激动、或是平静、或是大笑、或是哭泣，他们是幸福的，在这个星球上，在自己专业的领域里，他们战胜了所有对手，包括自己，这很难，真的很难。</p>
<p>相比训练中的辛苦汗水，运动员更要克服的是临场比赛时的巨大压力。有许多项目，尤其是偏静的项目，如射箭、乒乓球、击剑等，运动员的心理状态特别关键，稍有波动就会很大的影响最终成绩，每每此时，我都会设想自己在那种情况下是怎样一种状态，如何克服巨大的紧张情绪，但最终貌似无解 :( 估计上场就晕菜了吧 :D</p>
<p>国内的报道还是有点怪里怪气，但相比以往，已经进步很多，对体育精神的理解、对个体的关注均超过了我的预期。其实即使在广电的笼子里，主持人、解说嘉宾仍然有很大的发挥空间，希望他们内心的职业精神早日复苏，一点一点推进媒体环境的进步吧。</p>
<p>今年还看到了之前没有看过的比赛项目，比如盛装舞步、凯琳赛等，都非常有意思，有的运动本身就有很大的乐趣。我觉得应该多增加一些这样的项目，同时适当去除一些趣味性不强、对身体甚至有巨大损伤的运动，如举重等，希望这不是我的一厢情愿。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://likang.me/blog</uri>
    </author>
    <title type="html"><![CDATA[MacBook Air]]></title>
    <link rel="alternate" type="text/html" href="http://likang.me/blog/2012/07/29/macbook-air" />
    <id>http://likang.me/blog/2012/07/29/macbook-air</id>
    <updated>2012-07-29T23:50:53Z</updated>
    <published>2012-07-29T23:50:53Z</published>
    <category scheme="http://likang.me/blog" term="life" />
    <category scheme="http://likang.me/blog" term="tech" />
    <summary type="html"><![CDATA[MacBook Air]]></summary>
    <content type="html" xml:base="http://likang.me/blog/2012/07/29/macbook-air"><![CDATA[<p>两周前拿到了今年款的 13' 8G MacBook Air，终于结束了黑苹果生涯:D</p>
<p>无论是软件还是硬件都几乎无可挑剔，如果一定要说一两点，那么只能说 Mountain Lion 仍然没有解决双显示器应用程序全屏的问题，而且 ML 的耗电速度有点快，希望升级包能将问题解决。</p>
<p>装载着 Unix 核心的 Mac 几乎是完美的开发工具，配合 XCode 和 Homebrew，Linux 世界仿佛从未离开过。 近年来国内的一些公司也陆续踏上了 Mac 这块战场，因此大多数原本只能在 Windows 上享受的国内服务，将不再是拒绝 Mac 的理由了。</p>
<p>不得不说，GNOME/KDE 等项目着实让人灰心，只能希望它们能做得更好，算是给用户多一点选择。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://likang.me/blog</uri>
    </author>
    <title type="html"><![CDATA[每当变幻时]]></title>
    <link rel="alternate" type="text/html" href="http://likang.me/blog/2012/07/28/hooked-on-you" />
    <id>http://likang.me/blog/2012/07/28/hooked-on-you</id>
    <updated>2012-07-28T18:40:30Z</updated>
    <published>2012-07-28T18:40:30Z</published>
    <category scheme="http://likang.me/blog" term="life" />
    <summary type="html"><![CDATA[每当变幻时]]></summary>
    <content type="html" xml:base="http://likang.me/blog/2012/07/28/hooked-on-you"><![CDATA[<p>这首歌是某次跟朋友一起去KTV听到的，听到开头几句，我便坚持要听到最后了。接下来的这一两个月，我常常听，常常感动。我找了不同歌手的版本，以熏妮的演唱为最佳。</p>
<p>后来查到是同名电影的主题曲，昨晚抽空找来电影看，颇感失望，片子取材挺好，拍的却很生硬，好在留下了这样一首不俗的主题曲。</p>
<blockquote>
<p>《每当变幻时》 演唱：熏妮</p>
<p>怀缅过去常陶醉</p>
<p>一半乐事 一半令人流泪</p>
<p>梦如人生 快乐永记取</p>
<p>悲苦深刻藏骨髓</p>
<p>韶华去 四季暗中追随</p>
<p>逝去了的都已逝去</p>
<p>啊 常见明月挂天边</p>
<p>每当变幻时 便知时光去</p>
<p>怀缅过去常陶醉</p>
<p>想到旧事 欢笑面常流泪</p>
<p>梦如人生 试问谁能料</p>
<p>石头他朝成翡翠</p>
<p>如情侣 你我有心追随</p>
<p>遇到半点风雨便思退</p>
<p>啊 常见红日照东方</p>
<p>每当见夕阳 便知时光去</p>
</blockquote>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://likang.me/blog</uri>
    </author>
    <title type="html"><![CDATA[离开微博]]></title>
    <link rel="alternate" type="text/html" href="http://likang.me/blog/2012/07/28/leave-sina-weibo" />
    <id>http://likang.me/blog/2012/07/28/leave-sina-weibo</id>
    <updated>2012-07-28T18:26:27Z</updated>
    <published>2012-07-28T18:26:27Z</published>
    <category scheme="http://likang.me/blog" term="life" />
    <summary type="html"><![CDATA[离开微博]]></summary>
    <content type="html" xml:base="http://likang.me/blog/2012/07/28/leave-sina-weibo"><![CDATA[<p>升级 Mountain Lion 后内置的分享到新浪微博的功能让我想到了微博这茬。去年才注册的微博，从一开始的感觉有意思到现在的聊胜于无花了不到一年的时间。今年年初我开始不太发微博，大约一个多月前我删除了自己在新浪微博上的所有推，取消了所有关注，也删除了手机上的APP。</p>
<p>我对大众 SNS 有天生的抵触心理，QQ 空间、Facebook、人人甚至 Twitter 对我来说都像不存在一样，现在想想能用微博这么久已经是奇迹。</p>
<p>我想根本原因还是这些平台上信息的重复泛滥和过度流动，这对于想要获取高价值内容的人来说简直是噩梦。</p>
<p>解决方案？我不知道。关于内容，Google解决了内容搜索的问题，Facebook 和 Twitter 解决了信息流动的问题，也许接下来应该有产品来解决内容筛选和过滤的问题。</p>
<p>Google Reader 里订阅的高质量 RSS 继续成为我的主要资讯渠道。手机端的 Pulse 用着也非常趁手，尤其让人惊喜的是它可以二次抓取 Hacker News 的链接内容。</p>
<p>再多说一点。私以为除了电子商务和满足娱乐需求，激发创造和传播价值是互联网的核心。传播价值方面，各种 SNS 社区、即时半即时沟通工具等我觉得已做的足够好，多一个少一个无太大意义；激发创造方面， Quora 和 Github 等做的很不错，但这还远远不够，我们还需要更多这样的产品。</p>
<p>对 Stack Overflow 和 Quora 这样的产品我非常喜欢，能够稳定的产生高质量内容。除了有好的产品形态，良好的社区文化也犹如生命线一样重要，而这一点是国内的产品非常欠缺的，这跟大环境也有关，希望尽快能看到国内状况的改观。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://likang.me/blog</uri>
    </author>
    <title type="html"><![CDATA[品尝 Jelly Bean]]></title>
    <link rel="alternate" type="text/html" href="http://likang.me/blog/2012/07/18/taste-jelly-bean" />
    <id>http://likang.me/blog/2012/07/18/taste-jelly-bean</id>
    <updated>2012-07-18T21:54:02Z</updated>
    <published>2012-07-18T21:54:02Z</published>
    <category scheme="http://likang.me/blog" term="android" />
    <category scheme="http://likang.me/blog" term="tech" />
    <summary type="html"><![CDATA[品尝 Jelly Bean]]></summary>
    <content type="html" xml:base="http://likang.me/blog/2012/07/18/taste-jelly-bean"><![CDATA[<p>今早我的 Galaxy Nexus 收到 OTA 更新通知，对于懒得刷机的我来说是个意外的惊喜。</p>
<p>触屏滑动体验果然如<a href="http://www.android.com/about/jelly-bean/">官方所说</a>，有了极大的改进，摆脱了之前苦涩、跳动、突兀的滑动触感。在我看来仅仅是这一项，足以使 Jelly Bean 成为 Android 系统发展史中的一个里程碑。</p>
<p>我个人迟迟不买 Android 手机的一个很大原因就是体验了很多 Android 设备后，再与 iOS 相比，始终觉得 Android 无法感知我的触控意图。得知 Jelly Bean 对此有显著的优化提升后，我才选择了最可能先升级的 Galaxy Nexus，希望能弥补之前的挫败感，结果没有令我失望。</p>
<p>整体上 Android 与 iOS 的差距仍然巨大，使用两个星期之后，我只找到了寥寥几个高品质应用，市场上的应用多属于粗制滥造，即使是大公司出品，Android 版本与 iOS 版本相比，质量也有明显差距。</p>
<p>当然 Android 也不是全无优点，由于开放，使得第三方输入法、文件传输等均比较方便，Android 4.0 之后更是开放了网络权限，无需 Root 权限也可以使用 OpenVPN，这对于国内用户来说非常方便。</p>
<p>从技术上将，"Project Butter" 的成功也使我们对 Android 之后的技术升级之路有了信心。Android 之前的版本升级给人的感觉是技术功底不深，对软硬件的结合工作做的一直不是很到位，希望 Android 之后的版本能有更多的突破。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://likang.me/blog</uri>
    </author>
    <title type="html"><![CDATA[隐藏滚动条]]></title>
    <link rel="alternate" type="text/html" href="http://likang.me/blog/2012/07/17/hide-browser-scrollbar" />
    <id>http://likang.me/blog/2012/07/17/hide-browser-scrollbar</id>
    <updated>2012-07-17T23:56:56Z</updated>
    <published>2012-07-17T23:56:56Z</published>
    <category scheme="http://likang.me/blog" term="tech" />
    <category scheme="http://likang.me/blog" term="front end" />
    <summary type="html"><![CDATA[隐藏滚动条]]></summary>
    <content type="html" xml:base="http://likang.me/blog/2012/07/17/hide-browser-scrollbar"><![CDATA[<p>与 OSX Lion 原生的滚动条相比，Firefox 以及Windows下的滚动条就显得惨不忍睹了，有时我们想让它干脆不显示。W3C有关滚动条方面的标准几乎是没有，而且不是所有浏览器都能对滚动条进行自定义，我们只能另辟蹊径。</p>
<p>虽然说是隐藏，但是滚动功能还是要有的，否则 overflow: hidden 就可以了。在此我们采取的是用层遮罩的方式来实现。</p>
<p>首先要知道滚动条的宽度。由于JS中并没有直接获取滚动条宽度的方法，我们再耍一个小技巧：先生成一个不显示滚动条的元素块，计算其宽度，然后让其显示滚动条，则当前宽度跟原宽度的差值即是滚动条的宽度。感谢 <a href="http://www.alexandre-gomes.com/?p=115">alexandre</a> 提供的跨浏览器的解决方案：</p>
<pre><code>function getScrollBarWidth () {  
    var inner = document.createElement('p');  
    inner.style.width = "100%";  
    inner.style.height = "200px";

    var outer = document.createElement('div');  
    outer.style.position = "absolute";  
    outer.style.top = "0px";  
    outer.style.left = "0px";  
    outer.style.visibility = "hidden";  
    outer.style.width = "200px";  
    outer.style.height = "150px";  
    outer.style.overflow = "hidden";  
    outer.appendChild (inner);

    document.body.appendChild (outer);  
    var w1 = inner.offsetWidth;  
    outer.style.overflow = 'scroll';  
    var w2 = inner.offsetWidth;  
    if (w1 == w2) w2 = outer.clientWidth;

    document.body.removeChild (outer);

    return (w1 - w2);  
};
</code></pre>
<p>拿到滚动条宽度后，我们利用外部块级元素的overflow: hidden;属性将内部元素超出的部分隐藏掉。可使用margin或者手动调整内部元素宽度的方式来改变内部元素滚动条相对于外部元素的位置。</p>
<p>需要注意的是，OSX Lion Webkit内核的滚动条是悬浮在文本框之上的，因此宽度是零。好在我们可以通过设置CSS伪类的方式来达到目的。</p>
<pre><code>&lt;head&gt;
    &lt;style type="text/css"&gt;
        #mask {
            overflow: hidden;
            width: 200px;
            height: 200px;
        }
        #wrap {
            width: 100%;
            height: 100%;
            background-color: #D8D7CF;
            overflow-y: scroll;
        }
        #wrap::-webkit-scrollbar, #wrap::scrollbar {
            width: 0;
            height: 0;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="mask"&gt;
        &lt;div id="wrap"&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script type="text/javascript"&gt;
        document.getElementById("wrap").style.marginLeft 
            = getScrollBarWidth() + "px"
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>
<p>大功告成。原生的滚动条不见了，通过监听元素的 scroll 事件我们可以自定义的各种样式的滚动条。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://likang.me/blog</uri>
    </author>
    <title type="html"><![CDATA[胡杨]]></title>
    <link rel="alternate" type="text/html" href="http://likang.me/blog/2012/06/19/hu-yang" />
    <id>http://likang.me/blog/2012/06/19/hu-yang</id>
    <updated>2012-06-19T08:13:38Z</updated>
    <published>2012-06-19T08:13:38Z</published>
    <category scheme="http://likang.me/blog" term="life" />
    <summary type="html"><![CDATA[胡杨]]></summary>
    <content type="html" xml:base="http://likang.me/blog/2012/06/19/hu-yang"><![CDATA[<p>胡杨是我在火车上认识的一位52岁的阿姨。阿姨年轻时去过新疆，“胡杨”是她的网名。</p>
<p>阿姨跟我是老乡，生活在皖北的一个三线城市里。去上海的火车上我住中铺，她住下铺。我见阿姨面相和善，在帮她将行李箱放在行李架上之后，便盘腿坐在对面的下铺上跟她聊上两句。</p>
<p>得知她的火车票是自己在网上订的之后，我表示诧异，再知道她为了订到下铺，两次取消订单，第三次成功订到，发现她对网上订火车票比我了解的还多（我没想过订完后看上中下铺，也不知道每天有两次取消订单的机会），我很佩服，接着攀谈起来，之后我所了解的就让我大吃一惊了：</p>
<ol>
<li>阿姨自己网上买的火车票/飞机票，并在网上查找地铁、公交等换乘路线，并用百度知道来对具体行程进行提问</li>
<li>熟练使用淘宝、当当等网购网站，生活中大部分商品均是通过网络购买</li>
<li>懂得淘宝网的商业模式！知道沉淀的现金流是淘宝盈利的主要途径</li>
<li>懂得通过 URL 来辨别钓鱼网站，有基本的防骗、放钓鱼经验</li>
<li>尝试性投资黄金，了解金价和美元/欧元的正负相关性，于是在美国副总统拜登访华、法国总统萨克齐访华之前均对金价的波动做出了准确的预估</li>
<li>对目前国内的社会保障、医疗保障、教育体系的不足有明确的认识</li>
<li>谈政治，对党内政治斗争和宣传手段有一定的认识，熟悉敏感词，意外的是阿姨是 BO 的粉丝</li>
<li>从亲友那里了解欧美生活的基本形态，对欧美的基本法律、税收等制度有一定了解 </li>
<li>好学，经常网上查资料、看帖到很晚，夜猫子一枚</li>
</ol>
<p>对于这样有趣的人我绝不放过:D 我们在车厢关灯后继续聊到了接近12点，最终由于对面下铺女孩的抗议才终止，当然意犹未尽，第二天早起又接着聊起来了……</p>
<p>52岁了，阿姨并没有像身边大多数同龄人一样，或纠缠于家长里短，或闭塞无知而浑浑噩噩的活着。</p>
<p>为她的人生喝彩。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://likang.me/blog</uri>
    </author>
    <title type="html"><![CDATA[Morse IM]]></title>
    <link rel="alternate" type="text/html" href="http://likang.me/blog/2012/06/11/morse-im" />
    <id>http://likang.me/blog/2012/06/11/morse-im</id>
    <updated>2012-06-11T21:58:09Z</updated>
    <published>2012-06-11T21:58:09Z</published>
    <category scheme="http://likang.me/blog" term="tech" />
    <summary type="html"><![CDATA[Morse IM]]></summary>
    <content type="html" xml:base="http://likang.me/blog/2012/06/11/morse-im"><![CDATA[<p>数月前无意看到<a href="http://getshacked.com/work/teletweet/">TeleTweet</a>这个APP，这是一个Twitter客户端，富有创意的是它允许使用者以发电报的方式来发推。TeleTweet提供了一个精致的模拟电报机，你只需按照摩尔斯电码轻敲屏幕上的模拟电键，一个个英文字码便蹦出来，绝妙。</p>
<p>联想到Charles Petzold在《编码的奥秘》一书中所描述的两个小朋友通过手电筒交流的场景，我萌生了这样一个APP的想法：通过智能手机上的闪光灯实现“光通信”聊天 :P</p>
<p>使用方式很简单，A首先输入一段英文，点击发送，然后将手机的闪光灯一册面向B，程序将文字转换为摩尔斯码，并控制闪光灯的闪烁。而B只需将自己的摄像头对着A，则程序自动将闪烁的光点翻译为文字展示出来。如此反复，便可实现基本的IM功能。</p>
<p>程序的关键技术也应该不复杂，把文字编码为有规律的闪烁这个比较简单，而将闪烁还原成文字则需要一些专业知识。以我有限的图像处理知识来看，只需定时抓取摄像头的图像，灰度化之后寻找区域亮度的峰值，然后将连续的数据模拟化处理，便可大致还原成摩尔斯码的“嘀”和“嗒”，也就解码了文字。</p>
<p>当然这样的APP是没有什么实用价值的，但却非常有意思。我目前没有更多的时间做个Demo出来，图像处理的知识也很有限，如果有人有兴趣做一个出来，我当第一个用户:D</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://likang.me/blog</uri>
    </author>
    <title type="html"><![CDATA[Reflekt]]></title>
    <link rel="alternate" type="text/html" href="http://likang.me/blog/2012/05/19/reflekt" />
    <id>http://likang.me/blog/2012/05/19/reflekt</id>
    <updated>2012-05-19T13:41:19Z</updated>
    <published>2012-05-19T13:41:19Z</published>
    <category scheme="http://likang.me/blog" term="python" />
    <category scheme="http://likang.me/blog" term="project" />
    <summary type="html"><![CDATA[Reflekt]]></summary>
    <content type="html" xml:base="http://likang.me/blog/2012/05/19/reflekt"><![CDATA[<p>公司之前有做过类似Q卡的项目，现在不做了，于是闲置下来很多机器，就是一般挂在电梯里或者便利店里的那种。于是团队决定拉回来几个放在办公室玩玩。</p>
<p>机器有上下两个屏幕，下面的可触摸，系统是Ubuntu，我便想在这个上面可以玩点什么。想到之前在iOS上玩过一个叫<a href="http://itunes.apple.com/us/app/reflekt/id428836268?mt=8">Reflekt</a>的游戏，属于消除类，移动方块使得与镜面中的元素一致即可消除。而我们的机器有两个屏幕，正好可以当作镜面，于是我就想模拟一个出来放在上面玩玩。</p>
<p>写Linux上的游戏我自然想到<a href="http://www.pygame.org">Pygame</a>，一个Python的2D游戏库，使用起来颇为简单，而且游戏本身也不复杂，所以实现起来还算容易。</p>
<p>唯一复杂的部分在于，游戏窗口一般无法使用多线程来实现多窗口，只能通过多进程的方式，于是我需要开启两个相同的进程，一个作为主窗口，处理输入，并将相应的命令传递个另外一个窗口。而处理用户输入与发送命令之间需要异步操作，因此主进程中要开一个单独的线程来发送命令。将主进程接收的命令并传递到发送线程，采用Python内置的Queue队列实现，于是一个小小的程序，因为要多一点点多进程的交互，变得稍显复杂了起来。大致框架如下</p>
<pre><code> +----------------------------+         +-----------------------------+
 |        Main Process        |         |       Mirror Process        |
 +----------------------------+         +-----------------------------+
 |     +----------------+     |         |                             |
 |     |   User Input   |     |         |                             |
 |     +-------+--------+     |         |                             |
 |             |              |         |                             |
 |             | Queue        |         |                             |
 |             v              |         |                             |
 |     +----------------+     |         |     +-----------------+     |
 |     |                |     |         |     |                 |     |
 |     |                |     | socket  |     |                 |     |
 |     | Sender Thread  +-------------------&gt; | Receiver Thread |     |
 |     |                |     |         |     |                 |     |
 |     +----------------+     |         |     +-----------------+     |
 +----------------------------+         +-----------------------------+
</code></pre>
<p>目前还不完善，接下来要实现自动识别游戏结束，加入无尽模式。放在<a href="https://github.com/likang/reflekt">Github</a>上，有兴趣可以瞧一瞧。</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://likang.me/blog</uri>
    </author>
    <title type="html"><![CDATA[电池技术需要一场革命]]></title>
    <link rel="alternate" type="text/html" href="http://likang.me/blog/2012/05/15/battery-technology-revolution-required" />
    <id>http://likang.me/blog/2012/05/15/battery-technology-revolution-required</id>
    <updated>2012-05-15T10:03:14Z</updated>
    <published>2012-05-15T10:03:14Z</published>
    <category scheme="http://likang.me/blog" term="tech" />
    <summary type="html"><![CDATA[电池技术需要一场革命]]></summary>
    <content type="html" xml:base="http://likang.me/blog/2012/05/15/battery-technology-revolution-required"><![CDATA[<p>上个礼拜,同事拿回来一台 The new iPad, 新搭载的Retina屏幕着实惊艳，翻阅书籍、杂志的感觉舒服的不得了，可美中不足的是，甚至可以说深深遗憾的是：仍然太重了。</p>
<p>原因很简单：电池由上一版本的25Whr上升到了42.5Whr，容量足足提升了70%。实际上屏幕、处理器、主板等部件的重量和体积已经到达了合理的水平，而从iPad背部拆解图来看，3大块电池霸道的占据了绝大部分空间，有点惨不忍睹。</p>
<p>大部分情况下iPad是最好的平板，这一点毫无疑问，但从一代以来就有的一个问题是，因为太重，不适合长时间手握，所以也就无法像Kindle那样随身携带，人们更多的是把iPad放在支架上，或者用身体的某个部位支撑着，才能长时间的使用，否则一定是累得手酸臂痛。</p>
<p>问题不是现在才有，随着移动计算设备的流行，它们承载了过多的功能，用户对更强处理器、更清晰屏幕的需求导致设备耗电速度急速上升。早期手机的电量一般可用3-5天，现在最流行的iPhone/Android手机一般只能使用1天，尤其是出货量最大的Android，如果您再玩点游戏，可能连一天也支撑不了，这还是在电池容量翻一翻甚至翻两翻的情况下。</p>
<p>试想如果电池可以做到轻薄容量大，会发生什么事呢？iPad只有目前的一半厚度，且重量跟一个大号手机差不多，我想这下没人不愿意在自己的包里腾出点空间给iPad了吧；手机充电一次可以使用起码一个月，背包客就不用发愁手机充电的事了。</p>
<p>再想点别的，床头的台灯从此抛弃电线，随便把它拿到哪儿；甚至汽车也充电就跑，不用加油站了⋯⋯</p>
<p>如此种种必将对现有的工业产品产生极大的影响，甚至可能催生出划时代的电子产品，称之为一场革命也并不为过。</p>]]></content>
  </entry>
</feed>
